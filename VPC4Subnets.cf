AWSTemplateFormatVersion: 2010-09-09
#ref: https://godof.cloud/vpc-with-nat-gateway/ & https://github.com/godof-cloud/aws-vpc-natgateway & https://www.infoq.com/articles/aws-vpc-cloudformation/

Parameters:
  prefix:
    Type: String
    Description: Used to prefix stack elements, such as dev, test or prod
    Default: custom
  VpcCidrBlock:
    Type: String
  VpcMaskLength:
    Type: String
    Default: 16
  SubnetCidrBlocks:
    Type: CommaDelimitedList
    Description: 4 Subnet IP blocks, comma separated
  SubnetMaskLength:
    Type: String
    Default: 24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Join ["/",[!Ref VpcCidrBlock,!Ref VpcMaskLength]]
      Tags:
       -
         Key: Name
         Value: !Join ["-",[!Ref prefix,"vpc"]]
         
# Subnets-------------------------

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: !Join ["/",[!Select [0,!Ref SubnetCidrBlocks], !Ref SubnetMaskLength]]
      VpcId: !Ref VPC
      Tags:
       -
         Key: Name
         Value: !Join ["-",[!Ref prefix,"Public",!Ref AWS::Region,"Subnet"]]
         
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: !Join ["/",[!Select [1,!Ref SubnetCidrBlocks], !Ref SubnetMaskLength]]
      VpcId: !Ref VPC
      Tags:
       -
         Key: Name
         Value: !Join ["-",[!Ref prefix,"Public-E1B","Subnet"]]
         
  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: !Join ["/",[!Select [2,!Ref SubnetCidrBlocks], !Ref SubnetMaskLength]]
      VpcId: !Ref VPC
      Tags:
       -
         Key: Name
         Value: !Join ["-",[!Ref prefix,"Private-E1A","Subnet"]]

  Subnet4:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: !Join ["/",[!Select [3,!Ref SubnetCidrBlocks], !Ref SubnetMaskLength]]
      VpcId: !Ref VPC
      Tags:
       -
         Key: Name
         Value: !Join ["-",[!Ref prefix,"Private-E1B","Subnet"]]

# Route Tables --------------------
  PublicRouteTable:
    Type:  AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
       -
         Key: Name
         Value: !Join ["-",[!Ref prefix,"Public Route Table"]]
        
  PrivateRouteTable:
    Type:  AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
       -
         Key: Name
         Value: !Join ["-",[!Ref prefix,"Private Route Table"]]
         
  PublicRouteTableAssociation1:
    Type:  AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref PublicRouteTable
        
  PublicRouteTableAssociation2:
    Type:  AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref PublicRouteTable
        
  PrivateRouteTableAssociation3:
    Type:  AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet3
      RouteTableId: !Ref PrivateRouteTable
        
  PrivateRouteTableAssociation:
    Type:  AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet4
      RouteTableId: !Ref PrivateRouteTable
        
# Internet Gateway ------------------------
  InternetGateway:
    Type:  AWS::EC2::InternetGateway
    Properties:
      Tags:
       -
         Key: Name
         Value: !Join ["-",[!Ref prefix,"Internet Gateway"]]

  VpcIgAttachment:
    Type:  AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
        
  Route2Ig:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref InternetGateway
          
# NAT Gateway ------------------------------------
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags: 
       -
         Key: Name
         Value: !Join ["-",[!Ref prefix,"NAT GW Elastic IP"]]

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref Subnet1
      Tags:
       -
         Key: Name
         Value: !Join ["-",[!Ref prefix,"NAT Gateway"]]

  Route2Ng:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway
      
# Subnet Groups -------------------------------------
  PublicSG:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Public subnet group
      DBSubnetGroupName: !Join ["-",[!Ref prefix,"Public-SubnetGroup"
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
        
  PrivateSG:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Private subnet group
      DBSubnetGroupName: !Join ["-",[!Ref prefix,"Private-SubnetGroup"
      SubnetIds:
        - !Ref Subnet3
        - !Ref Subnet4
        
